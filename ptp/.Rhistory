knitr::kable(
pre,
caption = "My prediction on 2020 ( Probably very bad predictions)"
)
pre <- predicted %>% select(Period,sales,pred) %>% mutate(sales= exp(sales), pred=exp(pred))
pre
start <- "2013-01-01"
end <- "2019-12-01"
training_data <- with_trends_full %>%
filter(Period >=start& Period <=end)
model1 <- lm(data = training_data , sales~lag(sales, 12)+lag(sales, 48)+ lag(insurance,12) + lag(suvs,12))
# testing data has period up to 2020-12-01, these are place holders for predicted values
data_for_predict <- sales %>%
select(Period) %>%
left_join(with_trends_full, by = "Period") %>%
filter(Period >="2016-01-01")# 48 month before 2020-01-01
summary(model1)
predicted <- testing_data %>%
add_predictions(model1) %>%
filter(!(is.na(pred)))
pre <- predicted %>% select(Period,sales,pred) %>% mutate(sales= exp(sales), pred=exp(pred))
knitr::kable(pre)
knitr::kable(pre,format = "markdown")
knitr::kable(pre,format = "markdown")
library(scales)
library(tidyverse)
library(plotly)
library(lubridate)
library(broom)
library(modelr)
library(readxl)
library(zoo)
library(caret)
theme_set(theme_bw())
knitr::opts_chunk$set(
echo = TRUE,
message = FALSE,
warning = FALSE
)
# load the data that was used for the paper
merged <- read_csv("merged.csv")
# take the log of all sales values
merged$sales<-log(merged$sales)
# apply lm(). lag() is used to capture y_t-1 and y_t-12
model1 <- lm(data = merged, sales~lag(sales, 1)+lag(sales,12))
#the summary of the model
summary(model1)
# model with trends
model_with_trend <- lm(data = merged, sales~lag(sales, 1)+lag(sales,12) + suvs + insurance)
# model.matrix(lm(data = merged, sales~lag(sales, 1)+lag(sales,12) + suvs + insurance))
# summary table of the model
summary(model_with_trend)
# creating base
base <- merged # a place holder for predicted sales from baseline model
# rolling window forcast
for (i in 18:91){
merged_t <- merged[1:i-1,]
model1 <- lm(data = merged_t, sales~lag(sales, 1)+lag(sales,12))
base$sales[i] <- predict(model1,merged[1:i,])[i]
}
base <- base[18:91,]# select out all the predicted sales
# creating trends
trends <- merged
for (i in 18:91){
merged_t <- merged[1:i-1,]
model1 <- lm(data = merged_t, sales~lag(sales, 1)+lag(sales,12)+ suvs + insurance)
trends$sales[i] <- predict(model1,merged[1:i,])[i]
}
trends <- trends[18:91,]
# Make the graph
# add labels to the data
actual <- merged[18:91,] %>%
mutate(label ="actual")
base <- base %>%
mutate(label = "base")
trends <- trends %>%
mutate(label ="trends")
# means absolute error
mean(abs(trends$sales-actual$sales))
mean(abs(base$sales-actual$sales))
# data for the recession period Dec 2007 to June 2009
recession_trends <- trends %>%
filter(Period>="2007-12-01"& Period<="2009-06-01")
recession_base <- base %>%
filter(Period>="2007-12-01"& Period<="2009-06-01")
recession_actual <- actual %>%
filter(Period>="2007-12-01"& Period<="2009-06-01")
# means absolute error for the recession period
# MAE for the model with trends
mean(abs(recession_trends$sales-recession_actual$sales))
# MAE for the model for baseline model
mean(abs(recession_base$sales-recession_actual$sales))
# Overall improvement
(mean(abs(base$sales-actual$sales))-mean(abs(trends$sales-actual$sales)))/mean(abs(base$sales-actual$sales))
# recession improvement
(mean(abs(recession_base$sales-recession_actual$sales))-mean(abs(recession_trends$sales-recession_actual$sales)))/mean(abs(recession_base$sales-recession_actual$sales))
# Note: the improvements they stated in the paragraph were different from what they labeled on the graph. First, I thought they used some kind of function, but the MAE() from library(caret) gives same value.
# R^2 for base
(cor(base$sales,actual$sales))^2
# R^2 for trends
(cor(trends$sales,actual$sales))^2
# combine data for plotting
plot_data <- rbind(actual, base, trends)
ggplot(plot_data, aes(x=Period, y = sales, color = label, linetype = label))+
geom_line()+
scale_colour_manual(values=c("black", "red","grey"))+
scale_linetype_manual(values = c("solid", "dashed", "solid"))+
ylab('log(mvp)')+
xlab('Index')+
labs(subtitle ="MAE improvement: Overall = 10.66%  During recession = 21.46%" )
# load the data
sales <- read_excel("sales.xls")
merged <- read_csv("merged.csv")
# Period has type char in the data, convert that to yearmonth
ym <- as.yearmon(sales$Period, "%b-%Y")
# use as.Date() to convert the type of ym to date
sales$Period <- as.Date(ym)
#keep only data from 01/2004 through 07/2011 and renames the data frame as unadj, rename the column Value as sales,and add label "unadjusted"
unadj<- sales %>%
filter(Period <="2011-07-01") %>%
mutate(label = "unadjusted") %>%
rename(sales = Value)
# convert sales to numeric
unadj$sales <-as.numeric(unadj$sales)
# add label to original data, keep only Period, sales and label
orig <- merged %>%
mutate(label = "original") %>%
select(-insurance, -suvs)
# stack two data frame
com_data <- rbind(unadj, orig)
#plot log(sales) Vs Period
ggplot(com_data, aes(x=Period, y = log(sales), color = label)) +
geom_line()
# plot orignal against unadjusted
joined_data <- unadj %>% select(-label) %>% rename(unadjusted_sales = sales) %>% left_join(orig, by ="Period") %>% select(-label)
ggplot(joined_data, aes(x = sales, y = unadjusted_sales)) +
geom_point()+
geom_abline(linetype = "dashed") +
xlab('original') +
ylab('unadjusted')+
ggtitle("original sales against unadjusted sales")
#take the log of sales, take out the label column
unadj_rep <- unadj %>% mutate(sales=log(sales)) %>% select(-label)
# google_trends contains trends data and Period for join
google_trends <- merged %>% select(-sales)
# join trends to unadj_rep
unadj_with_trends <- unadj_rep %>% left_join(google_trends, by = "Period")
# replicate baseline model
model1 <- lm(data = unadj_with_trends, sales~lag(sales, 1)+lag(sales,12))
#the summary of the model
#summary(model1)
# replicate the model with trends
model_with_trend <- lm(data = unadj_with_trends, sales~lag(sales, 1)+lag(sales,12) + suvs + insurance)
#summary(model_with_trend)
# replicate figure 2
# creating base
base_unajusted <- unadj_with_trends
for (i in 18:91){
merged_t <- unadj_with_trends[1:i-1,]
model1 <- lm(data = merged_t, sales~lag(sales, 1)+lag(sales,12))
base_unajusted$sales[i] <- predict(model1,unadj_with_trends[1:i,])[i]
}
base_unajusted <- base_unajusted[18:91,]
# creating trends
trends_unajusted <- unadj_with_trends
for (i in 18:91){
merged_t <- unadj_with_trends[1:i-1,]
model1 <- lm(data = merged_t, sales~lag(sales, 1)+lag(sales,12) + suvs + insurance)
trends_unajusted$sales[i] <- predict(model1,unadj_with_trends[1:i,])[i]
}
trends_unajusted <- trends_unajusted[18:91,]
# label different data sets
actual_unajusted <- unadj_with_trends[18:91,]
actual_unajusted <- actual_unajusted %>%
mutate(label ="actual_unajusted")
base_unajusted <- base_unajusted %>%
mutate(label = "base_unajusted")
trends_unajusted <- trends_unajusted %>%
mutate(label ="trends_unajusted")
# R^2 for base
r_base <- (cor(base_unajusted$sales,actual_unajusted$sales))^2
# R^2 for trends
r_trend <- (cor(trends_unajusted$sales,actual_unajusted$sales))^2
# stack all data sets for plotting
plot_data <- rbind(actual, base, trends, actual_unajusted, base_unajusted, trends_unajusted)
ggplot(plot_data, aes(x=Period, y = sales, color = label, linetype = label))+
geom_line()+
scale_colour_manual(values=c("black","black", "red","red","grey","grey"))+
scale_linetype_manual(values = c("solid","solid","dashed", "dashed", "solid","solid"))+
ylab('log(mvp)')+
xlab('Index')
# trend 1
# search data in category Trucks & SUVs between 01/01/2004 and 07/01/2011
suvs_trends <- read_csv("New_Trucks_suvs.csv")
names1<- names(suvs_trends)
suvs_trends <- suvs_trends %>%
rename(suvs = names1[2],
Period = Month)
# trend 2
# search data in category Auto Insurance between 01/01/2004 and 07/01/2011
insurance_trends <- read_csv("New_auto_insurance.csv")
names2 <- names(insurance_trends)
insurance_trends <- insurance_trends %>%
rename(insurance = names2[2],
Period = Month)
# census data
unadj_full <- sales %>% filter(Period <= "2011-07-01")
#join trends data
trends_full <- left_join(insurance_trends, suvs_trends, by = "Period") %>% mutate(Period = as.Date(as.yearmon(Period, "%Y-%m")))
# join all data
with_trends_full <- left_join(unadj_full, trends_full, by = "Period") %>% rename(sales = Value)
# take the log of sales
with_trends_full$sales = log(as.numeric(with_trends_full$sales))
# apply lm(). lag() is used to capture y_t-1 and y_t-12
model1 <- lm(data = with_trends_full, sales~lag(sales, 1)+lag(sales,12))
# summary of model1
tidy(model1)
m1 <- glance(model1)
# model with previous month's trends data
model_with_trend_pre_month <- lm(data = with_trends_full, sales~lag(sales, 1)+lag(sales,12) +lag(suvs,1) + lag( insurance,1))
tidy(model_with_trend_pre_month)
mtp<-glance(model_with_trend_pre_month)
# model with current month's trends(we don't have weekly data, so we are using the monthly data instead)
model_with_trend_current <- lm(data = with_trends_full, sales~lag(sales, 1)+lag(sales,12) + suvs + insurance)
# summary table of the model
# summary(model_with_trend)
tidy(model_with_trend_current)
mtc<-glance(model_with_trend_current)
base <- with_trends_full
# creating predicted base with rolling window nowcast
for (i in 18:91){
merged_t <- with_trends_full[1:i-1,]
model1 <- lm(data = merged_t, sales~lag(sales, 1)+lag(sales,12))
base$sales[i] <- predict(model1,with_trends_full[1:i,])[i]
}
base <- base[18:91,]
# creating predicted trends with rolling window nowcast
trends <- with_trends_full
for (i in 18:91){
merged_t <- with_trends_full[1:i-1,]
model1 <- lm(data = merged_t, sales~lag(sales, 1)+lag(sales,12)+ suvs + insurance)
trends$sales[i] <- predict(model1,with_trends_full[1:i,])[i]
}
trends <- trends[18:91,]
# Make the graph
actual <- with_trends_full[18:91,]
actual <- actual %>%
mutate(label ="actual")
base <- base %>%
mutate(label = "base")
trends <- trends %>%
mutate(label ="trends")
plot_data <- rbind(actual, base, trends)
ggplotly(ggplot(plot_data, aes(x=Period, y = sales, color = label, linetype = label))+
geom_line()+
scale_colour_manual(values=c("black", "red","grey"))+
scale_linetype_manual(values = c("solid", "dashed", "solid"))+
ylab('log(mvp)')+
xlab('Index'))
# means absolute error
MAE_base <- mean(abs(base$sales-actual$sales))
MAE_trends <- mean(abs(trends$sales-actual$sales))
# data for recession period Dec 2007 to June 2009
recession_trends <- trends %>%
filter(Period>="2007-12-01"& Period<="2009-06-01")
recession_base <- base %>%
filter(Period>="2007-12-01"& Period<="2009-06-01")
recession_actual <- actual %>%
filter(Period>="2007-12-01"& Period<="2009-06-01")
MAE_recession_trends <- mean(abs(recession_trends$sales-recession_actual$sales))
MAE_recession_base <- mean(abs(recession_base$sales-recession_actual$sales))
# Overall improvement
overall_improv <- (mean(abs(base$sales-actual$sales))-mean(abs(trends$sales-actual$sales)))/mean(abs(base$sales-actual$sales))
# recession improvement
recession_improv <- (mean(abs(recession_base$sales-recession_actual$sales))-mean(abs(recession_trends$sales-recession_actual$sales)))/mean(abs(recession_base$sales-recession_actual$sales))
#R^2 for base
r_sqr_base <-(cor(base$sales,actual$sales))^2
# R^2 for trends
# r_sqr_trends <- (cor(trends$sales[3:73],actual$sales[3:73]))^2
r_sqr_trends <- (cor(trends$sales,actual$sales))^2
#We can use MAE() from caret package to calculate MAE
#
# library(caret)
#
# # R native funcitons
# MAE(recession_trends$sales, recession_actual$sales)
# MAE(recession_base$sales, recession_actual$sales)
#
# MAE(trends$sales, actual$sales)
# MAE(base$sales, actual$sales)
suvs_trends <- read_csv("trucks_suvs_2004_2020.csv")
insurance_trends <- read_csv("auto_insurance_2004_2020.csv")
# rename
names1<- names(suvs_trends)
names2 <- names(insurance_trends)
suvs_trends <- suvs_trends %>%
rename(suvs = names1[2],
Period = Month)
insurance_trends <- insurance_trends %>%
rename(insurance = names2[2],
Period = Month)
start_month <- "2011-07-01" # "2004-01-01"
end_month <- "2019-12-01"   # "2020-05-01"
unadj_full <- sales %>% filter(Period <= end_month & Period >start_month)
trends_full <- left_join(insurance_trends, suvs_trends, by = "Period") %>% mutate(Period = as.Date(as.yearmon(Period, "%Y-%m")))
with_trends_full <- left_join(unadj_full, trends_full, by = "Period") %>% rename(sales = Value)
with_trends_full$sales = log(as.numeric(with_trends_full$sales))
# apply lm(). lag() is used to capture y_t-1 and y_t-12
model1 <- lm(data = with_trends_full, sales~lag(sales, 1)+lag(sales,12))
#the summary of the model
summary(model1)
# model with trends
model_with_trend <- lm(data = with_trends_full, sales~lag(sales, 1)+lag(sales,12) + suvs + insurance)
# summary table of the model
summary(model_with_trend)
# Rolling window
base <- with_trends_full
len <- nrow(base)
# creating predicted base with rolling window forecast
for (i in 18:len){
merged_t <- with_trends_full[1:i-1,]
model1 <- lm(data = merged_t, sales~lag(sales, 1)+lag(sales,12))
base$sales[i] <- predict(model1,with_trends_full[1:i,])[i]
}
base <- base[18:len,]
# creating predicted trends with rolling window forecast
trends <- with_trends_full
for (i in 18:len){
merged_t <- with_trends_full[1:i-1,]
model1 <- lm(data = merged_t, sales~lag(sales, 1)+lag(sales,12)+ suvs + insurance)
trends$sales[i] <- predict(model1,with_trends_full[1:i,])[i]
}
trends <- trends[18:len,]
# Make the graph
actual <- with_trends_full[18:len,]
actual <- actual %>%
mutate(label ="actual")
base <- base %>%
mutate(label = "base")
trends <- trends %>%
mutate(label ="trends")
# R^2 for baseline model
r_sqr_base <-(cor(base$sales,actual$sales))^2
# R^2 for model with trends
r_sqr_trends <- (cor(trends$sales,actual$sales))^2
plot_data <- rbind(actual, base, trends)
ggplotly(ggplot(plot_data, aes(x=Period, y = sales, color = label, linetype = label))+
geom_line()+
scale_colour_manual(values=c("black", "red","grey"))+
scale_linetype_manual(values = c("solid", "dashed", "solid"))+
ylab('log(mvp)')+
xlab('Index'))
## getting data ready
suvs_trends <- read_csv("trucks_suvs_2004_2020.csv")
insurance_trends <- read_csv("auto_insurance_2004_2020.csv")
# rename
names1<- names(suvs_trends)
names2 <- names(insurance_trends)
suvs_trends <- suvs_trends %>%
rename(suvs = names1[2],
Period = Month)
insurance_trends <- insurance_trends %>%
rename(insurance = names2[2],
Period = Month)
unadj_full <- sales %>% filter(Period <= "2020-05-01")
##Join data
trends_full <- left_join(insurance_trends, suvs_trends, by = "Period") %>% mutate(Period = as.Date(as.yearmon(Period, "%Y-%m")))
with_trends_full <- left_join(unadj_full, trends_full, by = "Period") %>% rename(sales = Value)
with_trends_full$sales = log(as.numeric(with_trends_full$sales))
#with_trends_full$sales = as.numeric(with_trends_full$sales)
## starting from 2017
whole_data_2017 <- with_trends_full %>%
filter(Period >="2013-01-01" & Period <="2019-01-01") # we want to start predict 2017-01-01 when it is 2016-10-01, we need data from at least from 2015-10-01 (We want more data before first prediction to train a good model)
months <- nrow(whole_data_2017)
base <- whole_data_2017
start <- 46 # the index for 2016-10-01
# creating predicted base with rolling window nowcast
for (i in start:months){
merged_t <- whole_data_2017[1:i-1,]
model1 <- lm(data = merged_t, sales~lag(sales, 2)+lag(sales,14))
base$sales[i] <- predict(model1,whole_data_2017[1:i,])[i]
}
base <- base[start:months,]
# creating predicted trends with rolling window nowcast
trends <- whole_data_2017
for (i in start:months){
merged_t <- whole_data_2017[1:i-1,]
model1 <- lm(data = merged_t, sales~lag(sales, 2)+lag(sales,14)+ lag(suvs,2) + lag(insurance,2)) # we used search data from the month when we were making the prediction
trends$sales[i] <- predict(model1,whole_data_2017[1:i,])[i]
}
trends <- trends[start:months,]
# Make the graph
actual <- whole_data_2017[start:months,]
actual <- actual %>%
mutate(label ="actual")
base <- base %>%
mutate(label = "base")
trends <- trends %>%
mutate(label ="trends")
plot_data <- rbind(actual, base, trends)
ggplotly(ggplot(plot_data, aes(x=Period, y = sales, color = label, linetype = label))+
geom_line()+
scale_colour_manual(values=c("black", "red","grey"))+
scale_linetype_manual(values = c("solid", "dashed", "solid"))+
ylab('log(mvp)')+
xlab('Index'))
MAE(trends$sales, actual$sales)
MAE(base$sales, actual$sales)
(MAE(base$sales, actual$sales)-MAE(trends$sales, actual$sales))/MAE(base$sales, actual$sales)
#R^2 for base
(cor(base$sales,actual$sales))^2
# R^2 for trends
(cor(trends$sales,actual$sales))^2
# yearly trends
ggplotly(ggplot(with_trends_full, aes(x = Period, y = sales)) + geom_line())
# Used data from 2012-01-01 through 2018-12-01 to train the model
training_data <- with_trends_full %>%
filter(Period >="2012-01-01"& Period <="2018-12-01")
# I'm using trends data from previous year of the same month for training
model_with_trend_all <- lm(data = training_data , sales~lag(sales, 12)+lag(sales, 24)+lag(sales, 36)+lag(sales, 48)+ lag(insurance,12) + lag(suvs,12))
#summary(model_with_trend_all)
model_with_trend_2 <- lm(data = training_data , sales~lag(sales, 12)+lag(sales, 48)+ lag(insurance,12) + lag(suvs,12))
summary(model_with_trend_2)
model_without_trend <- lm(data = training_data , sales~lag(sales, 12)+lag(sales, 48))
summary(model_without_trend)
# we want to predict whole year of 2019, so we need data from 2015-01-01 and after
#Change here to see the graph of that model
model <- model_with_trend_2
test_data <- with_trends_full %>%
filter(Period >="2015-01-01" & Period <= "2019-12-01")
predictions <- test_data %>%
add_predictions(model) %>%
filter(Period >= "2019-01-01" )
MSE <- mean((predictions$pred -predictions$sales)^2)
ggplotly(ggplot(predictions, aes(x=exp(predictions$sales), y = exp(predictions$pred)))+
geom_point() +
geom_abline()+
xlab("Sales")+
ylab("Prediction"))
(cor(predictions$sales, predictions$pred))^2
# Used data from 2011-01-01 through 2017-12-01 to train the model
training_data <- with_trends_full %>%
filter(Period >="2011-01-01"& Period <="2017-12-01")
model <- lm(data = training_data , sales~lag(sales, 12)+lag(sales, 48)+ lag(insurance,12) + lag(suvs,12))
test_data <- with_trends_full %>%
filter(Period >="2014-01-01" & Period < "2019-01-01")
predictions <- test_data %>%
add_predictions(model) %>%
filter(Period >= "2018-01-01" )
ggplotly(ggplot(predictions, aes(x=exp(predictions$sales), y = exp(predictions$pred)))+
geom_point() +
geom_abline()+
xlab("Sales")+
ylab("Prediction"))
(cor(predictions$sales, predictions$pred))^2
# Used data from 2010-01-01 through 2016-12-01 to train the model
training_data <- with_trends_full %>%
filter(Period >="2010-01-01"& Period <="2016-12-01")
model <- lm(data = training_data , sales~lag(sales, 12)+lag(sales, 48)+ lag(insurance,12) + lag(suvs,12))
test_data <- with_trends_full %>%
filter(Period >="2013-01-01" & Period < "2018-01-01")
predictions <- test_data %>%
add_predictions(model) %>%
filter(Period >= "2017-01-01" )
ggplotly(ggplot(predictions, aes(x=exp(predictions$sales), y = exp(predictions$pred)))+
geom_point() +
geom_abline()+
xlab("Sales")+
ylab("Prediction"))
(cor(predictions$sales, predictions$pred))^2
# Used data from 2009-01-01 through 2015-12-01 to train the model
training_data <- with_trends_full %>%
filter(Period >="2009-01-01"& Period <="2015-12-01")
model <- lm(data = training_data , sales~lag(sales, 12)+lag(sales, 48)+ lag(insurance,12) + lag(suvs,12))
test_data <- with_trends_full %>%
filter(Period >="2012-01-01" & Period < "2017-01-01")
predictions <- test_data %>%
add_predictions(model) %>%
filter(Period >= "2016-01-01" )
ggplotly(ggplot(predictions, aes(x=exp(predictions$sales), y = exp(predictions$pred)))+
geom_point() +
geom_abline()+
xlab("Sales")+
ylab("Prediction"))
(cor(predictions$sales, predictions$pred))^2
# Used data from 2008-01-01 through 2014-12-01 to train the model
training_data <- with_trends_full %>%
filter(Period >="2008-01-01"& Period <="2014-12-01")
model <- lm(data = training_data , sales~lag(sales, 12)+lag(sales, 48)+ lag(insurance,12) + lag(suvs,12))
test_data <- with_trends_full %>%
filter(Period >="2011-01-01" & Period <= "2015-12-01")
predictions <- test_data %>%
add_predictions(model) %>%
filter(!(is.na(pred) )
ggplotly(ggplot(predictions, aes(x=exp(predictions$sales), y = exp(predictions$pred)))+
# Used data from 2008-01-01 through 2014-12-01 to train the model
training_data <- with_trends_full %>%
filter(Period >="2008-01-01"& Period <="2014-12-01")
model <- lm(data = training_data , sales~lag(sales, 12)+lag(sales, 48)+ lag(insurance,12) + lag(suvs,12))
test_data <- with_trends_full %>%
filter(Period >="2011-01-01" & Period <= "2015-12-01")
predictions <- test_data %>%
add_predictions(model) %>%
filter(!(is.na(pred)) )
ggplotly(ggplot(predictions, aes(x=exp(predictions$sales), y = exp(predictions$pred)))+
geom_point() +
geom_abline()+
xlab("Sales")+
ylab("Prediction"))
(cor(predictions$sales, predictions$pred))^2
# yearly trends
ggplotly(ggplot(with_trends_full, aes(x = Period, y = exp(sales))) + geom_line())
