rsb <- paste("Base: R^2 = ", round((cor(base$sales,actual$sales))^2,digits = 4))
# R^2 for trends
rst <- paste("Trend: R^2 = ", round((cor(trends$sales,actual$sales))^2,digits = 4))
ggplotly(ggplot(plot_data, aes(x=Period, y = sales, color = label, linetype = label))+
geom_line()+
ggtitle(paste0(rsb,"\n",rst))+
scale_colour_manual(values=c("black", "red","grey"))+
scale_linetype_manual(values = c("solid", "dashed", "solid"))+
ylab('log(mvp)')+
xlab('Index'))
#Start making prediction at 2010-01-01
trends_model <- sales~lag(sales, 12)+lag(sales, 48)+ lag(insurance,12) + lag(suvs,12)
base_model <- sales~lag(sales, 12)+lag(sales, 48)
start <-  63# the index for 2010-01-01
with_trends_full_sub <- with_trends_full %>% filter(Period > "2008-10-01")
months <- nrow(with_trends_full_sub)-5
# creating predicted base with rolling window nowcast
base <- with_trends_full_sub
for (i in start:months){
merged_t <- with_trends_full_sub[1:i-1,]
model1 <- lm(data = merged_t, base_model)
base$sales[i] <- predict(model1,with_trends_full_sub[1:i,])[i]
}
base <- base[start:months,]
# creating predicted trends with rolling window nowcast
trends <- with_trends_full_sub
for (i in start:months){
merged_t <- with_trends_full_sub[1:i-1,]
model1 <- lm(data = merged_t, trends_model) # we used search data from the month when we were making the prediction
trends$sales[i] <- predict(model1,with_trends_full_sub[1:i,])[i]
}
trends <- trends[start:months,]
# Make the graph
actual <- with_trends_full_sub[start:months,]
actual <- actual %>%
mutate(label ="actual")
base <- base %>%
mutate(label = "base")
trends <- trends %>%
mutate(label ="trends")
plot_data <- rbind(actual, base, trends)
#R^2 for baseline model
rsb <- paste("Base: R^2 = ", round((cor(base$sales,actual$sales))^2,digits = 4))
# R^2 for trends
rst <- paste("Trend: R^2 = ", round((cor(trends$sales,actual$sales))^2,digits = 4))
ggplotly(ggplot(plot_data, aes(x=Period, y = sales, color = label, linetype = label))+
geom_line()+
ggtitle(paste0(rsb,"\n",rst))+
scale_colour_manual(values=c("black", "red","grey"))+
scale_linetype_manual(values = c("solid", "dashed", "solid"))+
ylab('log(mvp)')+
xlab('Index'))
# Used data from 2012-01-01 through 2018-12-01 to train the model
training_data <- with_trends_full %>%
filter(Period >="2012-01-01"& Period <="2018-12-01")
# I'm using trends data from previous year of the same month for training
model_with_trend_all <- lm(data = training_data , sales~lag(sales, 12)+lag(sales, 24)+lag(sales, 36)+lag(sales, 48)+ lag(insurance,12) + lag(suvs,12))
#summary(model_with_trend_all)
model_with_trend_2 <- lm(data = training_data , sales~lag(sales, 12)+lag(sales, 48)+ lag(insurance,12) + lag(suvs,12))
summary(model_with_trend_2)
model_without_trend <- lm(data = training_data , sales~lag(sales, 12)+lag(sales, 48))
summary(model_without_trend)
# we want to predict whole year of 2019, so we need data from 2015-01-01 and after
#Change here to see the graph of that model
model <- model_with_trend_2
test_data <- with_trends_full %>%
filter(Period >="2015-01-01" & Period <= "2019-12-01")
predictions <- test_data %>%
add_predictions(model) %>%
filter(!(is.na(pred)) )
MSE <- mean((predictions$pred -predictions$sales)^2)
ggplotly(ggplot(predictions, aes(x=exp(predictions$sales), y = exp(predictions$pred)))+
geom_point() +
geom_abline()+
xlab("Sales")+
ylab("Prediction"))
(cor(predictions$sales, predictions$pred))^2
# Used data from 2011-01-01 through 2017-12-01 to train the model
training_data <- with_trends_full %>%
filter(Period >="2011-01-01"& Period <="2017-12-01")
model <- lm(data = training_data , sales~lag(sales, 12)+lag(sales, 48))
#+ lag(insurance,12) + lag(suvs,12))
test_data <- with_trends_full %>%
filter(Period >="2014-01-01" & Period < "2019-01-01")
predictions <- test_data %>%
add_predictions(model) %>%
filter(!(is.na(pred)) )
ggplotly(ggplot(predictions, aes(x=exp(predictions$sales), y = exp(predictions$pred)))+
geom_point() +
geom_abline()+
xlab("Sales")+
ylab("Prediction"))
(cor(predictions$sales, predictions$pred))^2
# Used data from 2010-01-01 through 2016-12-01 to train the model
training_data <- with_trends_full %>%
filter(Period >="2010-01-01"& Period <="2016-12-01")
model <- lm(data = training_data , sales~lag(sales, 12)+lag(sales, 48)+ lag(insurance,12) + lag(suvs,12))
test_data <- with_trends_full %>%
filter(Period >="2013-01-01" & Period < "2018-01-01")
predictions <- test_data %>%
add_predictions(model) %>%
filter(!(is.na(pred)) )
ggplotly(ggplot(predictions, aes(x=exp(predictions$sales), y = exp(predictions$pred)))+
geom_point() +
geom_abline()+
xlab("Sales")+
ylab("Prediction"))
(cor(predictions$sales, predictions$pred))^2
# Used data from 2009-01-01 through 2015-12-01 to train the model
training_data <- with_trends_full %>%
filter(Period >="2009-01-01"& Period <="2015-12-01")
model <- lm(data = training_data , sales~lag(sales, 12)+lag(sales, 48)+ lag(insurance,12) + lag(suvs,12))
test_data <- with_trends_full %>%
filter(Period >="2012-01-01" & Period < "2017-01-01")
predictions <- test_data %>%
add_predictions(model) %>%
filter(!(is.na(pred)) )
ggplotly(ggplot(predictions, aes(x=exp(predictions$sales), y = exp(predictions$pred)))+
geom_point() +
geom_abline()+
xlab("Sales")+
ylab("Prediction"))
(cor(predictions$sales, predictions$pred))^2
# Used data from 2008-01-01 through 2014-12-01 to train the model
training_data <- with_trends_full %>%
filter(Period >="2008-01-01"& Period <="2014-12-01")
model <- lm(data = training_data , sales~lag(sales, 12)+lag(sales, 48)+ lag(insurance,12) + lag(suvs,12))
test_data <- with_trends_full %>%
filter(Period >="2011-01-01" & Period <= "2015-12-01")
predictions <- test_data %>%
add_predictions(model) %>%
filter(!(is.na(pred)) )
ggplotly(ggplot(predictions, aes(x=exp(predictions$sales), y = exp(predictions$pred)))+
geom_point() +
geom_abline()+
xlab("Sales")+
ylab("Prediction"))
(cor(predictions$sales, predictions$pred))^2
# Used data from 2007-01-01 through 2014-12-01 to train the model
training_data <- with_trends_full %>%
filter(Period >="2007-01-01"& Period <="2013-12-01")
model <- lm(data = training_data , sales~lag(sales, 12)+lag(sales, 48)+ lag(insurance,12) + lag(suvs,12))
test_data <- with_trends_full %>%
filter(Period >="2010-01-01" & Period < "2017-01-01")
predictions <- test_data %>%
add_predictions(model) %>%
filter(Period >= "2014-01-01" )
ggplotly(ggplot(predictions, aes(x=exp(predictions$sales), y = exp(predictions$pred)))+
geom_point() +
geom_abline()+
xlab("Sales")+
ylab("Prediction"))
(cor(predictions$sales, predictions$pred))^2
# We are making prediction of 2019(whole year) at the begining of 2019 when the data for 2018-12 is available.
# played with different start month, 2016 gives the higher R^2
start <- "2016-01-01"
end <- "2018-12-01"
training_data <- with_trends_full %>%
filter(Period >=start& Period <=end)
model1 <- lm(data = training_data, sales~lag(sales, 1)+lag(sales,12))
testing_data <- with_trends_full %>% filter(Period >="2018-01-01")# 12 month before 2019-01-01
# summary(model1)
predicted <- testing_data %>%
add_predictions(model1) %>%
filter(!(is.na(pred)))
MSE <- mean((predicted$sales -predicted$pred)^2)
(cor(predicted$sales, predicted$pred))^2
n <- tidy(model1)
#prediction for June 2020
sales_2020_05 <- as.numeric(with_trends_full %>% filter(Period == "2020-05-01") %>% select(sales))
sales_2019_06 <- as.numeric(with_trends_full %>% filter(Period == "2019-06-01") %>% select(sales))
June <- exp(n$estimate[1] +n$estimate[2]*sales_2020_05+n$estimate[3]*sales_2019_06)
June
# prediction for July
sales_2019_07 <- as.numeric(with_trends_full %>% filter(Period == "2019-07-01") %>% select(sales))
July <-  exp(n$estimate[1] +n$estimate[2]*log(June)+n$estimate[3]*sales_2019_07)
July
start <- "2016-01-01"
end <- "2018-12-01"
training_data <- with_trends_full %>%
filter(Period >=start& Period <=end)
model1 <- lm(data = training_data, sales~lag(sales, 2)+lag(sales,14) + insurance + suvs)
testing_data <- with_trends_full %>% filter(Period >="2017-10-01")# 14 month before 2019-01-01
summary(model1)
predicted <- testing_data %>%
add_predictions(model1) %>%
filter(!(is.na(pred)))
MSE <- mean((predicted$sales -predicted$pred)^2)
(cor(predicted$sales, predicted$pred))^2
n <- tidy(model1)
#prediction for June 2020
sales_2020_05 <- as.numeric(with_trends_full %>% filter(Period == "2020-05-01") %>% select(sales))
sales_2019_05 <- as.numeric(with_trends_full %>% filter(Period == "2019-05-01") %>% select(sales))
June <- exp(n$estimate[1] +n$estimate[2]*sales_2020_05+n$estimate[3]*sales_2019_05)
June
start <- "2013-01-01"
end <- "2019-12-01"
training_data <- with_trends_full %>%
filter(Period >=start& Period <=end)
model1 <- lm(data = training_data , sales~lag(sales, 12)+lag(sales, 48)+ lag(insurance,12) + lag(suvs,12))
# testing data has period up to 2020-12-01, these are place holders for predicted values
data_for_predict <- sales %>%
select(Period) %>%
left_join(with_trends_full, by = "Period") %>%
filter(Period >="2016-01-01")# 48 month before 2020-01-01
#summary(model1)
predicted <- testing_data %>%
add_predictions(model1) %>%
filter(!(is.na(pred)))
pre <- predicted %>% select(Period,sales,pred) %>% mutate(sales= exp(sales), pred=exp(pred))
kable(pre)
View(pre)
predicted <- testing_data %>%
add_predictions(model1) %>%
filter(!(is.na(pred)))
View(predicted)
start <- "2013-01-01"
end <- "2019-12-01"
training_data <- with_trends_full %>%
filter(Period >=start& Period <=end)
model1 <- lm(data = training_data , sales~lag(sales, 12)+lag(sales, 48)+ lag(insurance,12) + lag(suvs,12))
# testing data has period up to 2020-12-01, these are place holders for predicted values
data_for_predict <- sales %>%
select(Period) %>%
left_join(with_trends_full, by = "Period") %>%
filter(Period >="2016-01-01")# 48 month before 2020-01-01
predicted <- testing_data %>%
add_predictions(model1)
View(predicted)
View(data_for_predict)
predicted <- data_for_predict %>%
add_predictions(model1)
pre <- predicted %>% select(Period,sales,pred) %>% mutate(sales= exp(sales), pred=exp(pred))
kable(pre)
start <- "2013-01-01"
end <- "2019-12-01"
training_data <- with_trends_full %>%
filter(Period >=start& Period <=end)
model1 <- lm(data = training_data , sales~lag(sales, 12)+lag(sales, 48)+ lag(insurance,12) + lag(suvs,12))
# testing data has period up to 2020-12-01, these are place holders for predicted values
data_for_predict <- sales %>%
select(Period) %>%
left_join(with_trends_full, by = "Period") %>%
filter(Period >="2016-01-01")# 48 month before 2020-01-01
#summary(model1)
predicted <- data_for_predict %>%
add_predictions(model1)
pre <- predicted %>% select(Period,sales,pred) %>% mutate(sales= exp(sales), pred=exp(pred))
kable(pre)
View(data_for_predict)
predicted <- data_for_predict %>%
add_predictions(model1)
View(predicted)
pre <- predicted %>% select(Period,sales,pred) %>% mutate(sales= exp(sales), pred=exp(pred))
View(pre)
pre <- predicted %>%
select(Period,sales,pred) %>%
mutate(sales= exp(sales), pred=exp(pred)) %>%
filter(Period >= "2020-01-01" & "2020-12-01")
kable(pre)
pre <- predicted %>%
select(Period,sales,pred) %>%
mutate(sales= exp(sales), pred=exp(pred)) %>%
filter(Period >= "2020-01-01" & Periof <="2020-12-01")
pre <- predicted %>%
select(Period,sales,pred) %>%
mutate(sales= exp(sales), pred=exp(pred)) %>%
filter(Period >= "2020-01-01" & Period <="2020-12-01")
kable(pre)
start <- "2013-01-01"
end <- "2019-12-01"
training_data <- with_trends_full %>%
filter(Period >=start& Period <=end)
model1 <- lm(data = training_data , sales~lag(sales, 12)+lag(sales, 48)+ lag(insurance,12) + lag(suvs,12))
# testing data has period up to 2020-12-01, these are place holders for predicted values
data_for_predict <- sales %>%
select(Period) %>%
left_join(with_trends_full, by = "Period") %>%
filter(Period >="2016-01-01")# 48 month before 2020-01-01
#summary(model1)
predicted <- data_for_predict %>%
add_predictions(model1)
pre <- predicted %>%
select(Period,sales,pred) %>%
mutate(sales= exp(sales), pred=exp(pred)) %>%
filter(Period >= "2020-01-01" & Period <="2020-12-01")
kable(pre,align = "ccc")
rolling_window <- function(begin, start, end, model,data_set){
p <- data_set %>% filter(Period >=begin & Period <= end)
s <- which(grepl(start, p$Period))
e <- which(grepl(end, p$Period))
for (i in s:e){
train_data <- p[1:i-1,]
model1 <- lm(data = train_data, model)
p$sales[i] <- predict(model1,train_data[1:i,])[i]
}
p[s:e,]
}
# beginning date
begin <-"2004-01-01"
# starting date for rolling-window-forecasting
start <- "2005-06-01"
# end date
end <- "2011-07-01"
base <- rolling_window(begin, start, end, "sales~lag(sales, 1)+lag(sales,12)", merged) %>%
mutate(label = "base")
trends <- rolling_window(begin, start, end, "sales~lag(sales, 1)+lag(sales,12)+ suvs + insurance",merged)%>%
mutate(label ="trends")
# actual data
actual <- merged %>% filter(Period >= start & Period <= end)
mutate(label ="actual")
# beginning date
begin <-"2004-01-01"
# starting date for rolling-window-forecasting
start <- "2005-06-01"
# end date
end <- "2011-07-01"
base <- rolling_window(begin, start, end, "sales~lag(sales, 1)+lag(sales,12)", merged) %>%
mutate(label = "base")
trends <- rolling_window(begin, start, end, "sales~lag(sales, 1)+lag(sales,12)+ suvs + insurance",merged)%>%
mutate(label ="trends")
# actual data
actual <- merged %>% filter(Period >= start & Period <= end) %>%
mutate(label ="actual")
# means absolute error
mean(abs(trends$sales-actual$sales))
mean(abs(base$sales-actual$sales))
# data for the recession period Dec 2007 to June 2009
recession_trends <- trends %>%
filter(Period>="2007-12-01"& Period<="2009-06-01")
recession_base <- base %>%
filter(Period>="2007-12-01"& Period<="2009-06-01")
recession_actual <- actual %>%
filter(Period>="2007-12-01"& Period<="2009-06-01")
# means absolute error for the recession period
# MAE for the model with trends
mean(abs(recession_trends$sales-recession_actual$sales))
# MAE for the model for baseline model
mean(abs(recession_base$sales-recession_actual$sales))
# Overall improvement
(mean(abs(base$sales-actual$sales))-mean(abs(trends$sales-actual$sales)))/mean(abs(base$sales-actual$sales))
# recession improvement
(mean(abs(recession_base$sales-recession_actual$sales))-mean(abs(recession_trends$sales-recession_actual$sales)))/mean(abs(recession_base$sales-recession_actual$sales))
# Note: the improvements they stated in the paragraph were different from what they labeled on the graph. First, I thought they used some kind of function, but the MAE() from library(caret) gives same value.
# R^2 for base
(cor(base$sales,actual$sales))^2
# R^2 for trends
(cor(trends$sales,actual$sales))^2
# combine data for plotting
plot_data <- rbind(actual, base, trends)
ggplot(plot_data, aes(x=Period, y = sales, color = label, linetype = label))+
geom_line()+
scale_colour_manual(values=c("black", "red","grey"))+
scale_linetype_manual(values = c("solid", "dashed", "solid"))+
ylab('log(mvp)')+
xlab('Index')+
labs(subtitle ="MAE improvement: Overall = 10.66%  During recession = 21.46%" )
base <- rolling_window(begin, start, end, "sales~lag(sales, 1)+lag(sales,12)", merged) %>%
mutate(label = "base") %>% View
# beginning date
begin <-"2004-01-01"
# starting date for rolling-window-forecasting
start <- "2005-06-01"
# end date
end <- "2011-07-01"
base <- rolling_window(begin, start, end, "sales~lag(sales, 1)+lag(sales,12)", merged) %>%
mutate(label = "base") %>% View
# beginning date
begin <-"2004-01-01"
# starting date for rolling-window-forecasting
start <- "2005-06-01"
# end date
end <- "2011-07-01"
base <- rolling_window(begin, start, end, sales~lag(sales, 1)+lag(sales,12), merged) %>%
mutate(label = "base") %>% View
trends <- rolling_window(begin, start, end, "sales~lag(sales, 1)+lag(sales,12)+ suvs + insurance",merged)%>%
mutate(label ="trends")
# actual data
actual <- merged %>% filter(Period >= start & Period <= end) %>%
mutate(label ="actual")
# means absolute error
mean(abs(trends$sales-actual$sales))
mean(abs(base$sales-actual$sales))
# data for the recession period Dec 2007 to June 2009
recession_trends <- trends %>%
filter(Period>="2007-12-01"& Period<="2009-06-01")
recession_base <- base %>%
filter(Period>="2007-12-01"& Period<="2009-06-01")
# beginning date
begin <-"2004-01-01"
# starting date for rolling-window-forecasting
start <- "2005-06-01"
# end date
end <- "2011-07-01"
base <- rolling_window(begin, start, end, sales~lag(sales, 1)+lag(sales,12), merged) %>%
mutate(label = "base")
trends <- rolling_window(begin, start, end, sales~lag(sales, 1)+lag(sales,12)+ suvs + insurance,merged)%>%
mutate(label ="trends")
# actual data
actual <- merged %>% filter(Period >= start & Period <= end) %>%
mutate(label ="actual")
# means absolute error
mean(abs(trends$sales-actual$sales))
mean(abs(base$sales-actual$sales))
# data for the recession period Dec 2007 to June 2009
recession_trends <- trends %>%
filter(Period>="2007-12-01"& Period<="2009-06-01")
recession_base <- base %>%
filter(Period>="2007-12-01"& Period<="2009-06-01")
recession_actual <- actual %>%
filter(Period>="2007-12-01"& Period<="2009-06-01")
# means absolute error for the recession period
# MAE for the model with trends
mean(abs(recession_trends$sales-recession_actual$sales))
# MAE for the model for baseline model
mean(abs(recession_base$sales-recession_actual$sales))
# Overall improvement
(mean(abs(base$sales-actual$sales))-mean(abs(trends$sales-actual$sales)))/mean(abs(base$sales-actual$sales))
# recession improvement
(mean(abs(recession_base$sales-recession_actual$sales))-mean(abs(recession_trends$sales-recession_actual$sales)))/mean(abs(recession_base$sales-recession_actual$sales))
# Note: the improvements they stated in the paragraph were different from what they labeled on the graph. First, I thought they used some kind of function, but the MAE() from library(caret) gives same value.
# R^2 for base
(cor(base$sales,actual$sales))^2
# R^2 for trends
(cor(trends$sales,actual$sales))^2
# combine data for plotting
plot_data <- rbind(actual, base, trends)
ggplot(plot_data, aes(x=Period, y = sales, color = label, linetype = label))+
geom_line()+
scale_colour_manual(values=c("black", "red","grey"))+
scale_linetype_manual(values = c("solid", "dashed", "solid"))+
ylab('log(mvp)')+
xlab('Index')+
labs(subtitle ="MAE improvement: Overall = 10.66%  During recession = 21.46%" )
trends <- rolling_window(begin, start, end, sales~lag(sales, 1)+lag(sales,12)+ suvs + insurance,merged)%>%
mutate(label ="trends")
View(trends)
rolling_window <- function(begin, start, end, model,data_set){
p <- data_set %>% filter(Period >=begin & Period <= end)
s <- which(grepl(start, p$Period))
e <- which(grepl(end, p$Period))
for (i in s:e){
train_data <- p[1:i-1,]
model1 <- lm(data = train_data, as.formula(model))
p$sales[i] <- predict(model1,train_data[1:i,])[i]
}
p[s:e,]
}
# beginning date
begin <-"2004-01-01"
# starting date for rolling-window-forecasting
start <- "2005-06-01"
# end date
end <- "2011-07-01"
base <- rolling_window(begin, start, end, "sales~lag(sales, 1)+lag(sales,12)", merged) %>%
mutate(label = "base")
trends <- rolling_window(begin, start, end, "sales~lag(sales, 1)+lag(sales,12)+ suvs + insurance",merged)%>%
mutate(label ="trends")
View(trends)
View(base)
base <- rolling_window(begin, start, end, "sales~lag(sales, 1)+lag(sales,12)", merged) %>%
mutate(label = "base")
trends <- rolling_window(begin, start, end, "sales~lag(sales, 1)+lag(sales,12)+ suvs + insurance",merged) %>%
mutate(label ="trends")
View(trends)
# beginning date
begin <-"2004-01-01"
# starting date for rolling-window-forecasting
start <- "2005-06-01"
# end date
end <- "2011-07-01"
base <- rolling_window(begin, start, end, "sales~lag(sales, 1)+lag(sales,12)", merged) %>%
mutate(label = "base")
trends <- rolling_window(begin, start, end, "sales~lag(sales, 1)+lag(sales,12)+ suvs + insurance", merged) %>%
mutate(label ="trends")
# actual data
actual <- merged %>% filter(Period >= start & Period <= end) %>%
mutate(label ="actual")
# means absolute error
mean(abs(trends$sales-actual$sales))
mean(abs(base$sales-actual$sales))
# data for the recession period Dec 2007 to June 2009
recession_trends <- trends %>%
filter(Period>="2007-12-01"& Period<="2009-06-01")
recession_base <- base %>%
filter(Period>="2007-12-01"& Period<="2009-06-01")
recession_actual <- actual %>%
filter(Period>="2007-12-01"& Period<="2009-06-01")
# means absolute error for the recession period
# MAE for the model with trends
mean(abs(recession_trends$sales-recession_actual$sales))
# MAE for the model for baseline model
mean(abs(recession_base$sales-recession_actual$sales))
# Overall improvement
(mean(abs(base$sales-actual$sales))-mean(abs(trends$sales-actual$sales)))/mean(abs(base$sales-actual$sales))
# recession improvement
(mean(abs(recession_base$sales-recession_actual$sales))-mean(abs(recession_trends$sales-recession_actual$sales)))/mean(abs(recession_base$sales-recession_actual$sales))
# Note: the improvements they stated in the paragraph were different from what they labeled on the graph. First, I thought they used some kind of function, but the MAE() from library(caret) gives same value.
# R^2 for base
(cor(base$sales,actual$sales))^2
# R^2 for trends
(cor(trends$sales,actual$sales))^2
# combine data for plotting
plot_data <- rbind(actual, base, trends)
ggplot(plot_data, aes(x=Period, y = sales, color = label, linetype = label))+
geom_line()+
scale_colour_manual(values=c("black", "red","grey"))+
scale_linetype_manual(values = c("solid", "dashed", "solid"))+
ylab('log(mvp)')+
xlab('Index')+
labs(subtitle ="MAE improvement: Overall = 10.66%  During recession = 21.46%" )
View(trends)
