ggplotly(ggplot(plot_data, aes(x=Period, y = sales, color = label, linetype = label))+
geom_line()+
scale_colour_manual(values=c("black", "red","grey"))+
scale_linetype_manual(values = c("solid", "dashed", "solid"))+
ylab('log(mvp)')+
xlab('Index'))
MAE(trends$sales, actual$sales)
MAE(base$sales, actual$sales)
(MAE(base$sales, actual$sales)-MAE(trends$sales, actual$sales))/MAE(base$sales, actual$sales)
#R^2 for base
(cor(base$sales,actual$sales))^2
# R^2 for trends
(cor(trends$sales,actual$sales))^2
# yearly trends
ggplotly(ggplot(with_trends_full, aes(x = Period, y = sales)) + geom_line())
# Used data from 2012-01-01 through 2018-12-01 to train the model
training_data <- with_trends_full %>%
filter(Period >="2012-01-01"& Period <="2018-12-01")
# I'm using trends data from previous year of the same month for training
model_with_trend_all <- lm(data = training_data , sales~lag(sales, 12)+lag(sales, 24)+lag(sales, 36)+lag(sales, 48)+ lag(insurance,12) + lag(suvs,12))
summary(model_with_trend_all)
model_with_trend_2 <- lm(data = training_data , sales~lag(sales, 12)+lag(sales, 48)+ lag(insurance,12) + lag(suvs,12))
summary(model_with_trend_2)
model_without_trend <- lm(data = training_data , sales~lag(sales, 12)+lag(sales, 48))
summary(model_without_trend)
# we want to predict whole year of 2019, so we need data from 2015-01-01 and after
#Change here to see the graph of that model
model <- model_with_trend_2
# test_data <- with_trends_full %>%
#   filter(Period >="2013-01-01")
# predictions <- test_data %>%
#   add_predictions(model) %>%
#   filter(Period >= "2017-01-01" & Period <= "2018-01-01")
# MSE <- mean((predictions$pred -predictions$sales)^2)
test_data <- with_trends_full %>%
filter(Period >="2015-01-01" & Period < "2020-01-01")
predictions <- test_data %>%
add_predictions(model) %>%
filter(Period >= "2019-01-01" )
MSE <- mean((predictions$pred -predictions$sales)^2)
ggplotly(ggplot(predictions, aes(x=exp(predictions$sales), y = exp(predictions$pred)))+
geom_point() +
geom_abline()+
xlab("Sales")+
ylab("Prediction"))
(cor(predictions$sales, predictions$pred))^2
# We are making prediction of 2019(whole year) at the begining of 2019 when the data for 2018-12 is available.
# plaied with different start month, 2016 gives the higher R^2
start <- "2016-01-01"
end <- "2018-12-01"
training_data <- with_trends_full %>%
filter(Period >=start& Period <=end)
model1 <- lm(data = training_data, sales~lag(sales, 1)+lag(sales,12))
testing_data <- with_trends_full %>% filter(Period >="2018-01-01")# 12 month before 2019-01-01
# summary(model1)
predicted <- testing_data %>%
add_predictions(model1) %>%
filter(!(is.na(pred)))
MSE <- mean((predicted$sales -predicted$pred)^2)
(cor(predicted$sales, predicted$pred))^2
n <- tidy(model1)
#prediction for June 2020
sales_2020_05 <- with_trends_full %>% View
select(sales,Period) %>% filter(Period == "2020-05-01")
June <- exp(n$estimate[1] +n$estimate[2]*data_2020$sales[17]+n$estimate[3]*data_2020$sales[6])
#prediction for June 2020
sales_2020_05 <- with_trends_full %>% slice(-1) %>% View
#prediction for June 2020
sales_2020_05 <- with_trends_full %>% filter(Period == "2020-05-01") %>% select(sales)
sales_2020_05
sales_2020_05*7
#prediction for June 2020
sales_2020_05 <- with_trends_full %>% filter(Period == "2020-05-01") %>% select(sales)
sales_2019_06 <- with_trends_full %>% filter(Period == "2019-06-01") %>% select(sales)
n
June <- exp(n$estimate[1] +n$estimate[2]*sales_2020_05+n$estimate[3]*sales_2019_06)
June
# prediction for July
sales_2019_07 <- with_trends_full %>% filter(Period == "2019-07-01") %>% select(sales)
# prediction for July
sales_2019_07 <- with_trends_full %>% filter(Period == "2019-07-01") %>% select(sales)
July <-  exp(n$estimate[1] +n$estimate[2]*log(June)+n$estimate[3]*sales_2019_07)
July
as.numeric(sales_2019_07)
# prediction for July
sales_2019_07 <- as.numeric(with_trends_full %>% filter(Period == "2019-07-01") %>% select(sales))
#prediction for June 2020
sales_2020_05 <- as.numeric(with_trends_full %>% filter(Period == "2020-05-01") %>% select(sales))
sales_2019_06 <- as.numeric(with_trends_full %>% filter(Period == "2019-06-01") %>% select(sales))
June <- exp(n$estimate[1] +n$estimate[2]*sales_2020_05+n$estimate[3]*sales_2019_06)
June
# prediction for July
sales_2019_07 <- as.numeric(with_trends_full %>% filter(Period == "2019-07-01") %>% select(sales))
July <-  exp(n$estimate[1] +n$estimate[2]*log(June)+n$estimate[3]*sales_2019_07)
July
start <- "2016-01-01"
end <- "2018-12-01"
training_data <- with_trends_full %>%
filter(Period >=start& Period <=end)
model1 <- lm(data = training_data, sales~lag(sales, 1)+lag(sales,12)+insurance +suvs)
testing_data <- with_trends_full %>% filter(Period >="2018-01-01")# 12 month before 2019-01-01
predicted <- testing_data %>%
add_predictions(model1) %>%
filter(!(is.na(pred)))
MSE <- mean((predicted$sales -predicted$pred)^2)
(cor(predicted$sales, predicted$pred))^2
n <- tidy(model1)
start <- "2016-01-01"
end <- "2018-12-01"
training_data <- with_trends_full %>%
filter(Period >=start& Period <=end)
model1 <- lm(data = training_data, sales~lag(sales, 1)+lag(sales,12)+insurance +suvs)
testing_data <- with_trends_full %>% filter(Period >="2018-01-01")# 12 month before 2019-01-01
summary(model1)
predicted <- testing_data %>%
add_predictions(model1) %>%
filter(!(is.na(pred)))
MSE <- mean((predicted$sales -predicted$pred)^2)
(cor(predicted$sales, predicted$pred))^2
n <- tidy(model1)
predicted
ggplot(predicted, aes( x= sales, y = pred)) +
geom_point() +
geom_abline()
start <- "2016-01-01"
end <- "2018-12-01"
training_data <- with_trends_full %>%
filter(Period >=start& Period <=end)
model1 <- lm(data = training_data, sales~lag(sales, 2)+lag(sales,14) + insurance + suvs)
testing_data <- with_trends_full %>% filter(Period >="2017-10-01")# 14 month before 2019-01-01
predicted <- testing_data %>%
add_predictions(model1) %>%
filter(!(is.na(pred)))
MSE <- mean((predicted$sales -predicted$pred)^2)
(cor(predicted$sales, predicted$pred))^2
n <- tidy(model1)
#prediction for June 2020
sales_2020_05 <- as.numeric(with_trends_full %>% filter(Period == "2020-05-01") %>% select(sales))
sales_2019_05 <- as.numeric(with_trends_full %>% filter(Period == "2019-05-01") %>% select(sales))
June <- exp(n$estimate[1] +n$estimate[2]*sales_2020_05+n$estimate[3]*sales_2019_05)
June
summary(model1)
View(with_trends_full)
View(unadj)
View(unadj_full)
View(trends_full)
View(sales)
sales %>% View
testing_data <- sales %>% select(Period) %>% left_join(with_trends_full, by = "Period") %>% View
# testing data has period up to 2020-12-01, these are place holders for predicted values
testing_data <- sales %>% select(Period) %>% left_join(with_trends_full, by = "Period")
testing_data <- with_trends_full %>% filter(Period >="2016-01-01" & Period < "2020-12-01")# 48 month before 2020-01-01
# testing data has period up to 2020-12-01, these are place holders for predicted values
testing_data <- sales %>%
select(Period) %>%
left_join(with_trends_full, by = "Period") %>%
filter(Period >="2016-01-01")# 48 month before 2020-01-01
summary(model1)
predicted <- testing_data %>%
add_predictions(model1) %>%
filter(!(is.na(pred)))
MSE <- mean((predicted$sales -predicted$pred)^2)
(cor(predicted$sales, predicted$pred))^2
n <- tidy(model1)
start <- "2013-01-01"
end <- "2019-12-01"
training_data <- with_trends_full %>%
filter(Period >=start& Period <=end)
model1 <- lm(data = training_data , sales~lag(sales, 12)+lag(sales, 48)+ lag(insurance,12) + lag(suvs,12))
# testing data has period up to 2020-12-01, these are place holders for predicted values
data_for_predict <- sales %>%
select(Period) %>%
left_join(with_trends_full, by = "Period") %>%
filter(Period >="2016-01-01")# 48 month before 2020-01-01
summary(model1)
start <- "2013-01-01"
end <- "2019-12-01"
training_data <- with_trends_full %>%
filter(Period >=start& Period <=end)
model1 <- lm(data = training_data , sales~lag(sales, 12)+lag(sales, 48)+ lag(insurance,12) + lag(suvs,12))
# testing data has period up to 2020-12-01, these are place holders for predicted values
data_for_predict <- sales %>%
select(Period) %>%
left_join(with_trends_full, by = "Period") %>%
filter(Period >="2016-01-01")# 48 month before 2020-01-01
summary(model1)
predicted <- testing_data %>%
add_predictions(model1) %>%
filter(!(is.na(pred)))
start <- "2013-01-01"
end <- "2019-12-01"
training_data <- with_trends_full %>%
filter(Period >=start& Period <=end)
model1 <- lm(data = training_data , sales~lag(sales, 12)+lag(sales, 48)+ lag(insurance,12) + lag(suvs,12))
# testing data has period up to 2020-12-01, these are place holders for predicted values
data_for_predict <- sales %>%
select(Period) %>%
left_join(with_trends_full, by = "Period") %>%
filter(Period >="2016-01-01")# 48 month before 2020-01-01
summary(model1)
predicted <- testing_data %>%
add_predictions(model1) %>%
filter(!(is.na(pred)))
predicted
predicted %>% select(Period,sales,pred) %>% mutate(sales= exp(sales), pred=exp(pred))
# Used data from 2012-01-01 through 2018-12-01 to train the model
training_data <- with_trends_full %>%
filter(Period >="2012-01-01"& Period <="2018-12-01")
# I'm using trends data from previous year of the same month for training
model_with_trend_all <- lm(data = training_data , sales~lag(sales, 12)+lag(sales, 24)+lag(sales, 36)+lag(sales, 48)+ lag(insurance,12) + lag(suvs,12))
summary(model_with_trend_all)
model_with_trend_2 <- lm(data = training_data , sales~lag(sales, 12)+lag(sales, 48)+ lag(insurance,12) + lag(suvs,12))
summary(model_with_trend_2)
model_without_trend <- lm(data = training_data , sales~lag(sales, 12)+lag(sales, 48))
summary(model_without_trend)
# we want to predict whole year of 2019, so we need data from 2015-01-01 and after
#Change here to see the graph of that model
model <- model_with_trend_2
# test_data <- with_trends_full %>%
#   filter(Period >="2013-01-01")
# predictions <- test_data %>%
#   add_predictions(model) %>%
#   filter(Period >= "2017-01-01" & Period <= "2018-01-01")
# MSE <- mean((predictions$pred -predictions$sales)^2)
test_data <- with_trends_full %>%
filter(Period >="2015-01-01" & Period < "2020-01-01")
predictions <- test_data %>%
add_predictions(model) %>%
filter(Period >= "2019-01-01" )
MSE <- mean((predictions$pred -predictions$sales)^2)
ggplotly(ggplot(predictions, aes(x=exp(predictions$sales), y = exp(predictions$pred)))+
geom_point() +
geom_abline()+
xlab("Sales")+
ylab("Prediction"))
(cor(predictions$sales, predictions$pred))^2
# Used data from 2011-01-01 through 2018-12-01 to train the model
training_data <- with_trends_full %>%
filter(Period >="2011-01-01"& Period <="2017-12-01")
# I'm using trends data from previous year of the same month for training
model_with_trend_all <- lm(data = training_data , sales~lag(sales, 12)+lag(sales, 24)+lag(sales, 36)+lag(sales, 48)+ lag(insurance,12) + lag(suvs,12))
summary(model_with_trend_all)
summary(model_with_trend_all)
model_with_trend_2 <- lm(data = training_data , sales~lag(sales, 12)+lag(sales, 48)+ lag(insurance,12) + lag(suvs,12))
summary(model_with_trend_2)
model_without_trend <- lm(data = training_data , sales~lag(sales, 12)+lag(sales, 48))
summary(model_without_trend)
#Change here to see the graph of that model
model <- model_with_trend_2
test_data <- with_trends_full %>%
filter(Period >="2014-01-01" & Period < "2019-01-01")
predictions <- test_data %>%
add_predictions(model) %>%
filter(Period >= "2018-01-01" )
MSE <- mean((predictions$pred -predictions$sales)^2)
ggplotly(ggplot(predictions, aes(x=exp(predictions$sales), y = exp(predictions$pred)))+
geom_point() +
geom_abline()+
xlab("Sales")+
ylab("Prediction"))
ggplotly(ggplot(predictions, aes(x=exp(predictions$sales), y = exp(predictions$pred)))+
geom_point() +
geom_abline()+
xlab("Sales")+
ylab("Prediction"))
(cor(predictions$sales, predictions$pred))^2
predicted
predictions
# Used data from 2011-01-01 through 2018-12-01 to train the model
training_data <- with_trends_full %>%
filter(Period >="2010-01-01"& Period <="2016-12-01")
# I'm using trends data from previous year of the same month for training
model_with_trend_all <- lm(data = training_data , sales~lag(sales, 12)+lag(sales, 24)+lag(sales, 36)+lag(sales, 48)+ lag(insurance,12) + lag(suvs,12))
summary(model_with_trend_all)
model_with_trend_2 <- lm(data = training_data , sales~lag(sales, 12)+lag(sales, 48)+ lag(insurance,12) + lag(suvs,12))
summary(model_with_trend_2)
model_without_trend <- lm(data = training_data , sales~lag(sales, 12)+lag(sales, 48))
summary(model_without_trend)
summary(model_without_trend)
#Change here to see the graph of that model
model <- model_with_trend_2
test_data <- with_trends_full %>%
filter(Period >="2013-01-01" & Period < "2018-01-01")
predictions <- test_data %>%
add_predictions(model) %>%
filter(Period >= "2017-01-01" )
MSE <- mean((predictions$pred -predictions$sales)^2)
ggplotly(ggplot(predictions, aes(x=exp(predictions$sales), y = exp(predictions$pred)))+
geom_point() +
geom_abline()+
xlab("Sales")+
ylab("Prediction"))
ggplotly(ggplot(predictions, aes(x=exp(predictions$sales), y = exp(predictions$pred)))+
geom_point() +
geom_abline()+
xlab("Sales")+
ylab("Prediction"))
(cor(predictions$sales, predictions$pred))^2
# Used data from 2011-01-01 through 2018-12-01 to train the model
training_data <- with_trends_full %>%
filter(Period >="2009-01-01"& Period <="2015-12-01")
# I'm using trends data from previous year of the same month for training
model_with_trend_all <- lm(data = training_data , sales~lag(sales, 12)+lag(sales, 24)+lag(sales, 36)+lag(sales, 48)+ lag(insurance,12) + lag(suvs,12))
summary(model_with_trend_all)
summary(model_with_trend_all)
model_with_trend_2 <- lm(data = training_data , sales~lag(sales, 12)+lag(sales, 48)+ lag(insurance,12) + lag(suvs,12))
summary(model_with_trend_2)
summary(model_with_trend_2)
model_without_trend <- lm(data = training_data , sales~lag(sales, 12)+lag(sales, 48))
summary(model_without_trend)
#Change here to see the graph of that model
model <- model_with_trend_2
summary(model_without_trend)
#Change here to see the graph of that model
model <- model_with_trend_2
test_data <- with_trends_full %>%
filter(Period >="2012-01-01" & Period < "2017-01-01")
test_data <- with_trends_full %>%
filter(Period >="2012-01-01" & Period < "2017-01-01")
predictions <- test_data %>%
add_predictions(model) %>%
filter(Period >= "2016-01-01" )
test_data <- with_trends_full %>%
filter(Period >="2012-01-01" & Period < "2017-01-01")
predictions <- test_data %>%
add_predictions(model) %>%
filter(Period >= "2016-01-01" )
MSE <- mean((predictions$pred -predictions$sales)^2)
ggplotly(ggplot(predictions, aes(x=exp(predictions$sales), y = exp(predictions$pred)))+
geom_point() +
geom_abline()+
xlab("Sales")+
ylab("Prediction"))
ggplotly(ggplot(predictions, aes(x=exp(predictions$sales), y = exp(predictions$pred)))+
geom_point() +
geom_abline()+
xlab("Sales")+
ylab("Prediction"))
(cor(predictions$sales, predictions$pred))^2
predictions
# Used data from 2011-01-01 through 2018-12-01 to train the model
training_data <- with_trends_full %>%
filter(Period >="2008-01-01"& Period <="2014-12-01")
# I'm using trends data from previous year of the same month for training
model_with_trend_all <- lm(data = training_data , sales~lag(sales, 12)+lag(sales, 24)+lag(sales, 36)+lag(sales, 48)+ lag(insurance,12) + lag(suvs,12))
summary(model_with_trend_all)
summary(model_with_trend_all)
model_with_trend_2 <- lm(data = training_data , sales~lag(sales, 12)+lag(sales, 48)+ lag(insurance,12) + lag(suvs,12))
summary(model_with_trend_2)
model_without_trend <- lm(data = training_data , sales~lag(sales, 12)+lag(sales, 48))
model_without_trend <- lm(data = training_data , sales~lag(sales, 12)+lag(sales, 48))
summary(model_without_trend)
#Change here to see the graph of that model
model <- model_with_trend_2
summary(model_without_trend)
#Change here to see the graph of that model
model <- model_with_trend_2
test_data <- with_trends_full %>%
filter(Period >="2011-01-01" & Period < "2016-01-01")
predictions <- test_data %>%
add_predictions(model) %>%
filter(Period >= "2015-01-01" )
MSE <- mean((predictions$pred -predictions$sales)^2)
ggplotly(ggplot(predictions, aes(x=exp(predictions$sales), y = exp(predictions$pred)))+
geom_point() +
geom_abline()+
xlab("Sales")+
ylab("Prediction"))
predictions <- test_data %>%
add_predictions(model) %>%
filter(Period >= "2015-01-01" )
MSE <- mean((predictions$pred -predictions$sales)^2)
ggplotly(ggplot(predictions, aes(x=exp(predictions$sales), y = exp(predictions$pred)))+
geom_point() +
geom_abline()+
xlab("Sales")+
ylab("Prediction"))
(cor(predictions$sales, predictions$pred))^2
predictions
# Used data from 2011-01-01 through 2017-12-01 to train the model
training_data <- with_trends_full %>%
filter(Period >="2011-01-01"& Period <="2017-12-01")
model <- lm(data = training_data , sales~lag(sales, 12)+lag(sales, 48)+ lag(insurance,12) + lag(suvs,12))
test_data <- with_trends_full %>%
filter(Period >="2014-01-01" & Period < "2019-01-01")
predictions <- test_data %>%
add_predictions(model) %>%
filter(Period >= "2018-01-01" )
ggplotly(ggplot(predictions, aes(x=exp(predictions$sales), y = exp(predictions$pred)))+
geom_point() +
geom_abline()+
xlab("Sales")+
ylab("Prediction"))
(cor(predictions$sales, predictions$pred))^2
# Used data from 2010-01-01 through 2016-12-01 to train the model
training_data <- with_trends_full %>%
filter(Period >="2010-01-01"& Period <="2016-12-01")
model <- lm(data = training_data , sales~lag(sales, 12)+lag(sales, 48)+ lag(insurance,12) + lag(suvs,12))
test_data <- with_trends_full %>%
filter(Period >="2013-01-01" & Period < "2018-01-01")
predictions <- test_data %>%
add_predictions(model) %>%
filter(Period >= "2017-01-01" )
ggplotly(ggplot(predictions, aes(x=exp(predictions$sales), y = exp(predictions$pred)))+
geom_point() +
geom_abline()+
xlab("Sales")+
ylab("Prediction"))
(cor(predictions$sales, predictions$pred))^2
# Used data from 2009-01-01 through 2015-12-01 to train the model
training_data <- with_trends_full %>%
filter(Period >="2009-01-01"& Period <="2015-12-01")
model <- lm(data = training_data , sales~lag(sales, 12)+lag(sales, 48)+ lag(insurance,12) + lag(suvs,12))
test_data <- with_trends_full %>%
filter(Period >="2012-01-01" & Period < "2017-01-01")
predictions <- test_data %>%
add_predictions(model) %>%
filter(Period >= "2016-01-01" )
ggplotly(ggplot(predictions, aes(x=exp(predictions$sales), y = exp(predictions$pred)))+
geom_point() +
geom_abline()+
xlab("Sales")+
ylab("Prediction"))
(cor(predictions$sales, predictions$pred))^2
# Used data from 2008-01-01 through 2014-12-01 to train the model
training_data <- with_trends_full %>%
filter(Period >="2008-01-01"& Period <="2014-12-01")
model <- lm(data = training_data , sales~lag(sales, 12)+lag(sales, 48)+ lag(insurance,12) + lag(suvs,12))
test_data <- with_trends_full %>%
filter(Period >="2011-01-01" & Period < "2016-01-01")
predictions <- test_data %>%
add_predictions(model) %>%
filter(Period >= "2015-01-01" )
ggplotly(ggplot(predictions, aes(x=exp(predictions$sales), y = exp(predictions$pred)))+
geom_point() +
geom_abline()+
xlab("Sales")+
ylab("Prediction"))
(cor(predictions$sales, predictions$pred))^2
# Used data from 2007-01-01 through 2014-12-01 to train the model
training_data <- with_trends_full %>%
filter(Period >="2007-01-01"& Period <="2013-12-01")
model <- lm(data = training_data , sales~lag(sales, 12)+lag(sales, 48)+ lag(insurance,12) + lag(suvs,12))
test_data <- with_trends_full %>%
filter(Period >="2010-01-01" & Period < "2017-01-01")
predictions <- test_data %>%
add_predictions(model) %>%
filter(Period >= "2014-01-01" )
ggplotly(ggplot(predictions, aes(x=exp(predictions$sales), y = exp(predictions$pred)))+
geom_point() +
geom_abline()+
xlab("Sales")+
ylab("Prediction"))
(cor(predictions$sales, predictions$pred))^2
start <- "2013-01-01"
end <- "2019-12-01"
training_data <- with_trends_full %>%
filter(Period >=start& Period <=end)
model1 <- lm(data = training_data , sales~lag(sales, 12)+lag(sales, 48)+ lag(insurance,12) + lag(suvs,12))
# testing data has period up to 2020-12-01, these are place holders for predicted values
data_for_predict <- sales %>%
select(Period) %>%
left_join(with_trends_full, by = "Period") %>%
filter(Period >="2016-01-01")# 48 month before 2020-01-01
summary(model1)
predicted <- testing_data %>%
add_predictions(model1) %>%
filter(!(is.na(pred)))
predicted %>% select(Period,sales,pred) %>% mutate(sales= exp(sales), pred=exp(pred))
pre <- predicted %>% select(Period,sales,pred) %>% mutate(sales= exp(sales), pred=exp(pred))
knitr::kable(
pre
)
start <- "2013-01-01"
end <- "2019-12-01"
training_data <- with_trends_full %>%
filter(Period >=start& Period <=end)
model1 <- lm(data = training_data , sales~lag(sales, 12)+lag(sales, 48)+ lag(insurance,12) + lag(suvs,12))
# testing data has period up to 2020-12-01, these are place holders for predicted values
data_for_predict <- sales %>%
select(Period) %>%
left_join(with_trends_full, by = "Period") %>%
filter(Period >="2016-01-01")# 48 month before 2020-01-01
summary(model1)
predicted <- testing_data %>%
add_predictions(model1) %>%
filter(!(is.na(pred)))
pre <- predicted %>% select(Period,sales,pred) %>% mutate(sales= exp(sales), pred=exp(pred))
knitr::kable(
pre,
caption = "My prediction on 2020 ( Probably very bad predictions)"
)
pre <- predicted %>% select(Period,sales,pred) %>% mutate(sales= exp(sales), pred=exp(pred))
pre
start <- "2013-01-01"
end <- "2019-12-01"
training_data <- with_trends_full %>%
filter(Period >=start& Period <=end)
model1 <- lm(data = training_data , sales~lag(sales, 12)+lag(sales, 48)+ lag(insurance,12) + lag(suvs,12))
# testing data has period up to 2020-12-01, these are place holders for predicted values
data_for_predict <- sales %>%
select(Period) %>%
left_join(with_trends_full, by = "Period") %>%
filter(Period >="2016-01-01")# 48 month before 2020-01-01
summary(model1)
predicted <- testing_data %>%
add_predictions(model1) %>%
filter(!(is.na(pred)))
pre <- predicted %>% select(Period,sales,pred) %>% mutate(sales= exp(sales), pred=exp(pred))
knitr::kable(pre)
knitr::kable(pre,format = "markdown")
knitr::kable(pre,format = "markdown")
