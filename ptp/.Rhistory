rsb<- (cor(base$sales,actual$sales))^2
rrr <- paste("R^2", rsb)
# R^2 for trends
(cor(trends$sales,actual$sales))^2
ggplotly(ggplot(plot_data, aes(x=Period, y = sales, color = label, linetype = label))+
geom_line()+
scale_colour_manual(values=c("black", "red","grey"))+
scale_linetype_manual(values = c("solid", "dashed", "solid"))+
ylab('log(mvp)')+
xlab('Index'))+
ggtitle(paste0("R^2=", rrr,"\n"))
rrr <- paste("R^2", rsb)
# R^2 for trends
(cor(trends$sales,actual$sales))^2
ggplotly(ggplot(plot_data, aes(x=Period, y = sales, color = label, linetype = label))+
geom_line()+
scale_colour_manual(values=c("black", "red","grey"))+
scale_linetype_manual(values = c("solid", "dashed", "solid"))+
ylab('log(mvp)')+
xlab('Index'))+
ggtitle(paste0( rrr))
source('~/.active-rstudio-document', echo=TRUE)
ggplotly(ggplot(plot_data, aes(x=Period, y = sales, color = label, linetype = label))+
geom_line()+
ggtitle(paste0(rrr))+
scale_colour_manual(values=c("black", "red","grey"))+
scale_linetype_manual(values = c("solid", "dashed", "solid"))+
ylab('log(mvp)')+
xlab('Index'))
rsb <- paste("Baseline: R^2 = ", (cor(base$sales,actual$sales))^2)
#Start making prediction at 2010-01-01
trends_model <- sales~lag(sales, 12)+lag(sales, 24)+lag(sales, 36)+lag(sales, 48)+ lag(insurance,12) + lag(suvs,12)
base_model <- sales~lag(sales, 12)+lag(sales, 24)+lag(sales, 36)+lag(sales, 48)
start <- 73 # the index for 2010-01-01
months <- nrow(with_trends_full)
# creating predicted base with rolling window nowcast
base <- with_trends_full
for (i in start:months){
merged_t <- with_trends_full[1:i-1,]
model1 <- lm(data = merged_t, base_model)
base$sales[i] <- predict(model1,with_trends_full[1:i,])[i]
}
base <- base[start:months,]
# creating predicted trends with rolling window nowcast
trends <- with_trends_full
for (i in start:months){
merged_t <- with_trends_full[1:i-1,]
model1 <- lm(data = merged_t, trends_model) # we used search data from the month when we were making the prediction
trends$sales[i] <- predict(model1,with_trends_full[1:i,])[i]
}
trends <- trends[start:months,]
# Make the graph
actual <- with_trends_full[start:months,]
actual <- actual %>%
mutate(label ="actual")
base <- base %>%
mutate(label = "base")
trends <- trends %>%
mutate(label ="trends")
plot_data <- rbind(actual, base, trends)
#R^2 for baseline model
rsb <- paste("Baseline: R^2 = ", round((cor(base$sales,actual$sales))^2,digits = 4))
# R^2 for trends
rst <- paste("Baseline: R^2 = ", round((cor(trends$sales,actual$sales))^2,digits = 4))
ggplotly(ggplot(plot_data, aes(x=Period, y = sales, color = label, linetype = label))+
geom_line()+
ggtitle(paste0(rsb,"\n",rst))+
scale_colour_manual(values=c("black", "red","grey"))+
scale_linetype_manual(values = c("solid", "dashed", "solid"))+
ylab('log(mvp)')+
xlab('Index'))
#Start making prediction at 2010-01-01
trends_model <- sales~lag(sales, 12)+lag(sales, 24)+lag(sales, 36)+lag(sales, 48)+ lag(insurance,12) + lag(suvs,12)
base_model <- sales~lag(sales, 12)+lag(sales, 24)+lag(sales, 36)+lag(sales, 48)
start <- 73 # the index for 2010-01-01
months <- nrow(with_trends_full)
# creating predicted base with rolling window nowcast
base <- with_trends_full
for (i in start:months){
merged_t <- with_trends_full[1:i-1,]
model1 <- lm(data = merged_t, base_model)
base$sales[i] <- predict(model1,with_trends_full[1:i,])[i]
}
base <- base[start:months,]
# creating predicted trends with rolling window nowcast
trends <- with_trends_full
for (i in start:months){
merged_t <- with_trends_full[1:i-1,]
model1 <- lm(data = merged_t, trends_model) # we used search data from the month when we were making the prediction
trends$sales[i] <- predict(model1,with_trends_full[1:i,])[i]
}
trends <- trends[start:months,]
# Make the graph
actual <- with_trends_full[start:months,]
actual <- actual %>%
mutate(label ="actual")
base <- base %>%
mutate(label = "base")
trends <- trends %>%
mutate(label ="trends")
plot_data <- rbind(actual, base, trends)
#R^2 for baseline model
rsb <- paste("Base: R^2 = ", round((cor(base$sales,actual$sales))^2,digits = 4))
# R^2 for trends
rst <- paste("Trend: R^2 = ", round((cor(trends$sales,actual$sales))^2,digits = 4))
ggplotly(ggplot(plot_data, aes(x=Period, y = sales, color = label, linetype = label))+
geom_line()+
ggtitle(paste0(rsb,"\n",rst))+
scale_colour_manual(values=c("black", "red","grey"))+
scale_linetype_manual(values = c("solid", "dashed", "solid"))+
ylab('log(mvp)')+
xlab('Index'))
#Start making prediction at 2010-01-01
trends_model <- sales~lag(sales, 12)+lag(sales, 24)+lag(sales, 36)+lag(sales, 48)+ lag(insurance,12) + lag(suvs,12)
base_model <- sales~lag(sales, 12)+lag(sales, 24)+lag(sales, 36)+lag(sales, 48)
start <- 133 # the index for 2010-01-01
months <- nrow(with_trends_full)
# creating predicted base with rolling window nowcast
base <- with_trends_full
for (i in start:months){
merged_t <- with_trends_full[1:i-1,]
model1 <- lm(data = merged_t, base_model)
base$sales[i] <- predict(model1,with_trends_full[1:i,])[i]
}
base <- base[start:months,]
# creating predicted trends with rolling window nowcast
trends <- with_trends_full
for (i in start:months){
merged_t <- with_trends_full[1:i-1,]
model1 <- lm(data = merged_t, trends_model) # we used search data from the month when we were making the prediction
trends$sales[i] <- predict(model1,with_trends_full[1:i,])[i]
}
trends <- trends[start:months,]
# Make the graph
actual <- with_trends_full[start:months,]
actual <- actual %>%
mutate(label ="actual")
base <- base %>%
mutate(label = "base")
trends <- trends %>%
mutate(label ="trends")
plot_data <- rbind(actual, base, trends)
#R^2 for baseline model
rsb <- paste("Base: R^2 = ", round((cor(base$sales,actual$sales))^2,digits = 4))
# R^2 for trends
rst <- paste("Trend: R^2 = ", round((cor(trends$sales,actual$sales))^2,digits = 4))
ggplotly(ggplot(plot_data, aes(x=Period, y = sales, color = label, linetype = label))+
geom_line()+
ggtitle(paste0(rsb,"\n",rst))+
scale_colour_manual(values=c("black", "red","grey"))+
scale_linetype_manual(values = c("solid", "dashed", "solid"))+
ylab('log(mvp)')+
xlab('Index'))
#Start making prediction at 2010-01-01
trends_model <- sales~lag(sales, 12)+lag(sales, 24)+lag(sales, 36)+lag(sales, 48)+ lag(insurance,12) + lag(suvs,12)
base_model <- sales~lag(sales, 12)+lag(sales, 24)+lag(sales, 36)+lag(sales, 48)
start <- 133 # the index for 2010-01-01
months <- nrow(with_trends_full)-5
# creating predicted base with rolling window nowcast
base <- with_trends_full
for (i in start:months){
merged_t <- with_trends_full[1:i-1,]
model1 <- lm(data = merged_t, base_model)
base$sales[i] <- predict(model1,with_trends_full[1:i,])[i]
}
base <- base[start:months,]
# creating predicted trends with rolling window nowcast
trends <- with_trends_full
for (i in start:months){
merged_t <- with_trends_full[1:i-1,]
model1 <- lm(data = merged_t, trends_model) # we used search data from the month when we were making the prediction
trends$sales[i] <- predict(model1,with_trends_full[1:i,])[i]
}
trends <- trends[start:months,]
# Make the graph
actual <- with_trends_full[start:months,]
actual <- actual %>%
mutate(label ="actual")
base <- base %>%
mutate(label = "base")
trends <- trends %>%
mutate(label ="trends")
plot_data <- rbind(actual, base, trends)
#R^2 for baseline model
rsb <- paste("Base: R^2 = ", round((cor(base$sales,actual$sales))^2,digits = 4))
# R^2 for trends
rst <- paste("Trend: R^2 = ", round((cor(trends$sales,actual$sales))^2,digits = 4))
ggplotly(ggplot(plot_data, aes(x=Period, y = sales, color = label, linetype = label))+
geom_line()+
ggtitle(paste0(rsb,"\n",rst))+
scale_colour_manual(values=c("black", "red","grey"))+
scale_linetype_manual(values = c("solid", "dashed", "solid"))+
ylab('log(mvp)')+
xlab('Index'))
#Start making prediction at 2010-01-01
trends_model <- sales~lag(sales, 12)+lag(sales, 24)+lag(sales, 36)+lag(sales, 48)+ lag(insurance,12) + lag(suvs,12)
base_model <- sales~lag(sales, 12)+lag(sales, 24)+lag(sales, 36)+lag(sales, 48)
start <- 73 # the index for 2010-01-01
months <- nrow(with_trends_full)
# creating predicted base with rolling window nowcast
base <- with_trends_full
for (i in start:months){
merged_t <- with_trends_full[1:i-1,]
model1 <- lm(data = merged_t, base_model)
base$sales[i] <- predict(model1,with_trends_full[1:i,])[i]
}
base <- base[start:months,]
# creating predicted trends with rolling window nowcast
trends <- with_trends_full
for (i in start:months){
merged_t <- with_trends_full[1:i-1,]
model1 <- lm(data = merged_t, trends_model) # we used search data from the month when we were making the prediction
trends$sales[i] <- predict(model1,with_trends_full[1:i,])[i]
}
trends <- trends[start:months,]
# Make the graph
actual <- with_trends_full[start:months,]
actual <- actual %>%
mutate(label ="actual")
base <- base %>%
mutate(label = "base")
trends <- trends %>%
mutate(label ="trends")
plot_data <- rbind(actual, base, trends)
#R^2 for baseline model
rsb <- paste("Base: R^2 = ", round((cor(base$sales,actual$sales))^2,digits = 4))
# R^2 for trends
rst <- paste("Trend: R^2 = ", round((cor(trends$sales,actual$sales))^2,digits = 4))
ggplotly(ggplot(plot_data, aes(x=Period, y = sales, color = label, linetype = label))+
geom_line()+
ggtitle(paste0(rsb,"\n",rst))+
scale_colour_manual(values=c("black", "red","grey"))+
scale_linetype_manual(values = c("solid", "dashed", "solid"))+
ylab('log(mvp)')+
xlab('Index'))
#Start making prediction at 2010-01-01
trends_model <- sales~lag(sales, 12)+lag(sales, 48)+ lag(insurance,12) + lag(suvs,12)
base_model <- sales~lag(sales, 12)+lag(sales, 48)
start <- 73 # the index for 2010-01-01
months <- nrow(with_trends_full)
# creating predicted base with rolling window nowcast
base <- with_trends_full
for (i in start:months){
merged_t <- with_trends_full[1:i-1,]
model1 <- lm(data = merged_t, base_model)
base$sales[i] <- predict(model1,with_trends_full[1:i,])[i]
}
base <- base[start:months,]
# creating predicted trends with rolling window nowcast
trends <- with_trends_full
for (i in start:months){
merged_t <- with_trends_full[1:i-1,]
model1 <- lm(data = merged_t, trends_model) # we used search data from the month when we were making the prediction
trends$sales[i] <- predict(model1,with_trends_full[1:i,])[i]
}
trends <- trends[start:months,]
# Make the graph
actual <- with_trends_full[start:months,]
actual <- actual %>%
mutate(label ="actual")
base <- base %>%
mutate(label = "base")
trends <- trends %>%
mutate(label ="trends")
plot_data <- rbind(actual, base, trends)
#R^2 for baseline model
rsb <- paste("Base: R^2 = ", round((cor(base$sales,actual$sales))^2,digits = 4))
# R^2 for trends
rst <- paste("Trend: R^2 = ", round((cor(trends$sales,actual$sales))^2,digits = 4))
ggplotly(ggplot(plot_data, aes(x=Period, y = sales, color = label, linetype = label))+
geom_line()+
ggtitle(paste0(rsb,"\n",rst))+
scale_colour_manual(values=c("black", "red","grey"))+
scale_linetype_manual(values = c("solid", "dashed", "solid"))+
ylab('log(mvp)')+
xlab('Index'))
#Start making prediction at 2010-01-01
trends_model <- sales~lag(sales, 12)+lag(sales, 48)+ lag(insurance,12) + lag(suvs,12)
base_model <- sales~lag(sales, 12)+lag(sales, 48)
start <- 121 # the index for 2010-01-01
months <- nrow(with_trends_full)
# creating predicted base with rolling window nowcast
base <- with_trends_full
for (i in start:months){
merged_t <- with_trends_full[1:i-1,]
model1 <- lm(data = merged_t, base_model)
base$sales[i] <- predict(model1,with_trends_full[1:i,])[i]
}
base <- base[start:months,]
# creating predicted trends with rolling window nowcast
trends <- with_trends_full
for (i in start:months){
merged_t <- with_trends_full[1:i-1,]
model1 <- lm(data = merged_t, trends_model) # we used search data from the month when we were making the prediction
trends$sales[i] <- predict(model1,with_trends_full[1:i,])[i]
}
trends <- trends[start:months,]
# Make the graph
actual <- with_trends_full[start:months,]
actual <- actual %>%
mutate(label ="actual")
base <- base %>%
mutate(label = "base")
trends <- trends %>%
mutate(label ="trends")
plot_data <- rbind(actual, base, trends)
#R^2 for baseline model
rsb <- paste("Base: R^2 = ", round((cor(base$sales,actual$sales))^2,digits = 4))
# R^2 for trends
rst <- paste("Trend: R^2 = ", round((cor(trends$sales,actual$sales))^2,digits = 4))
ggplotly(ggplot(plot_data, aes(x=Period, y = sales, color = label, linetype = label))+
geom_line()+
ggtitle(paste0(rsb,"\n",rst))+
scale_colour_manual(values=c("black", "red","grey"))+
scale_linetype_manual(values = c("solid", "dashed", "solid"))+
ylab('log(mvp)')+
xlab('Index'))
#Start making prediction at 2010-01-01
trends_model <- sales~lag(sales, 12)+lag(sales, 48)+ lag(insurance,12) + lag(suvs,12)
base_model <- sales~lag(sales, 12)+lag(sales, 48)
start <- 150 # the index for 2010-01-01
months <- nrow(with_trends_full)
# creating predicted base with rolling window nowcast
base <- with_trends_full
for (i in start:months){
merged_t <- with_trends_full[1:i-1,]
model1 <- lm(data = merged_t, base_model)
base$sales[i] <- predict(model1,with_trends_full[1:i,])[i]
}
base <- base[start:months,]
# creating predicted trends with rolling window nowcast
trends <- with_trends_full
for (i in start:months){
merged_t <- with_trends_full[1:i-1,]
model1 <- lm(data = merged_t, trends_model) # we used search data from the month when we were making the prediction
trends$sales[i] <- predict(model1,with_trends_full[1:i,])[i]
}
trends <- trends[start:months,]
# Make the graph
actual <- with_trends_full[start:months,]
actual <- actual %>%
mutate(label ="actual")
base <- base %>%
mutate(label = "base")
trends <- trends %>%
mutate(label ="trends")
plot_data <- rbind(actual, base, trends)
#R^2 for baseline model
rsb <- paste("Base: R^2 = ", round((cor(base$sales,actual$sales))^2,digits = 4))
# R^2 for trends
rst <- paste("Trend: R^2 = ", round((cor(trends$sales,actual$sales))^2,digits = 4))
ggplotly(ggplot(plot_data, aes(x=Period, y = sales, color = label, linetype = label))+
geom_line()+
ggtitle(paste0(rsb,"\n",rst))+
scale_colour_manual(values=c("black", "red","grey"))+
scale_linetype_manual(values = c("solid", "dashed", "solid"))+
ylab('log(mvp)')+
xlab('Index'))
#Start making prediction at 2010-01-01
trends_model <- sales~lag(sales, 12)+lag(sales, 48)+ lag(insurance,12) + lag(suvs,12)
base_model <- sales~lag(sales, 12)+lag(sales, 48)
start <- 121 # the index for 2010-01-01
months <- nrow(with_trends_full)-5
# creating predicted base with rolling window nowcast
base <- with_trends_full
for (i in start:months){
merged_t <- with_trends_full[1:i-1,]
model1 <- lm(data = merged_t, base_model)
base$sales[i] <- predict(model1,with_trends_full[1:i,])[i]
}
base <- base[start:months,]
# creating predicted trends with rolling window nowcast
trends <- with_trends_full
for (i in start:months){
merged_t <- with_trends_full[1:i-1,]
model1 <- lm(data = merged_t, trends_model) # we used search data from the month when we were making the prediction
trends$sales[i] <- predict(model1,with_trends_full[1:i,])[i]
}
trends <- trends[start:months,]
# Make the graph
actual <- with_trends_full[start:months,]
actual <- actual %>%
mutate(label ="actual")
base <- base %>%
mutate(label = "base")
trends <- trends %>%
mutate(label ="trends")
plot_data <- rbind(actual, base, trends)
#R^2 for baseline model
rsb <- paste("Base: R^2 = ", round((cor(base$sales,actual$sales))^2,digits = 4))
# R^2 for trends
rst <- paste("Trend: R^2 = ", round((cor(trends$sales,actual$sales))^2,digits = 4))
ggplotly(ggplot(plot_data, aes(x=Period, y = sales, color = label, linetype = label))+
geom_line()+
ggtitle(paste0(rsb,"\n",rst))+
scale_colour_manual(values=c("black", "red","grey"))+
scale_linetype_manual(values = c("solid", "dashed", "solid"))+
ylab('log(mvp)')+
xlab('Index'))
#Start making prediction at 2010-01-01
trends_model <- sales~lag(sales, 12)+lag(sales, 48)+ lag(insurance,12) + lag(suvs,12)
base_model <- sales~lag(sales, 12)+lag(sales, 48)
start <- 121 # the index for 2010-01-01
with_trends_full_sub <- with_trends_full_sub %>% filter(Perod > "2008-10-01")
#Start making prediction at 2010-01-01
trends_model <- sales~lag(sales, 12)+lag(sales, 48)+ lag(insurance,12) + lag(suvs,12)
base_model <- sales~lag(sales, 12)+lag(sales, 48)
start <- 121 # the index for 2010-01-01
with_trends_full_sub <- with_trends_full %>% filter(Perod > "2008-10-01")
#Start making prediction at 2010-01-01
trends_model <- sales~lag(sales, 12)+lag(sales, 48)+ lag(insurance,12) + lag(suvs,12)
base_model <- sales~lag(sales, 12)+lag(sales, 48)
start <- 121 # the index for 2010-01-01
with_trends_full_sub <- with_trends_full %>% filter(Period > "2008-10-01")
months <- nrow(with_trends_full)-5
# creating predicted base with rolling window nowcast
base <- with_trends_full_sub
for (i in start:months){
merged_t <- with_trends_full_sub[1:i-1,]
model1 <- lm(data = merged_t, base_model)
base$sales[i] <- predict(model1,with_trends_full_sub[1:i,])[i]
}
trends_model <- sales~lag(sales, 12)+lag(sales, 48)+ lag(insurance,12) + lag(suvs,12)
base_model <- sales~lag(sales, 12)+lag(sales, 48)
start <- 121 # the index for 2010-01-01
with_trends_full_sub <- with_trends_full %>% filter(Period > "2008-10-01")
months <- nrow(with_trends_full)-5
# creating predicted base with rolling window nowcast
base <- with_trends_full_sub
for (i in start:months){
merged_t <- with_trends_full_sub[1:i-1,]
model1 <- lm(data = merged_t, base_model)
base$sales[i] <- predict(model1,with_trends_full_sub[1:i,])[i]
}
start <-  # the index for 2010-01-01
with_trends_full_sub <- with_trends_full %>% filter(Period > "2008-10-01")
View(trends_full)
View(with_trends_full_sub)
#Start making prediction at 2010-01-01
trends_model <- sales~lag(sales, 12)+lag(sales, 48)+ lag(insurance,12) + lag(suvs,12)
base_model <- sales~lag(sales, 12)+lag(sales, 48)
start <-  63# the index for 2010-01-01
with_trends_full_sub <- with_trends_full %>% filter(Period > "2008-10-01")
months <- nrow(with_trends_full)-5
# creating predicted base with rolling window nowcast
base <- with_trends_full_sub
for (i in start:months){
merged_t <- with_trends_full_sub[1:i-1,]
model1 <- lm(data = merged_t, base_model)
base$sales[i] <- predict(model1,with_trends_full_sub[1:i,])[i]
}
#Start making prediction at 2010-01-01
trends_model <- sales~lag(sales, 12)+lag(sales, 48)+ lag(insurance,12) + lag(suvs,12)
base_model <- sales~lag(sales, 12)+lag(sales, 48)
start <-  63# the index for 2010-01-01
with_trends_full_sub <- with_trends_full %>% filter(Period > "2008-10-01")
months <- nrow(with_trends_full_sub)-5
# creating predicted base with rolling window nowcast
base <- with_trends_full_sub
for (i in start:months){
merged_t <- with_trends_full_sub[1:i-1,]
model1 <- lm(data = merged_t, base_model)
base$sales[i] <- predict(model1,with_trends_full_sub[1:i,])[i]
}
base <- base[start:months,]
# creating predicted trends with rolling window nowcast
trends <- with_trends_full_sub
for (i in start:months){
merged_t <- with_trends_full_sub[1:i-1,]
model1 <- lm(data = merged_t, trends_model) # we used search data from the month when we were making the prediction
trends$sales[i] <- predict(model1,with_trends_full_sub[1:i,])[i]
}
trends <- trends[start:months,]
# Make the graph
actual <- with_trends_full_sub[start:months,]
actual <- actual %>%
mutate(label ="actual")
base <- base %>%
mutate(label = "base")
trends <- trends %>%
mutate(label ="trends")
plot_data <- rbind(actual, base, trends)
#R^2 for baseline model
rsb <- paste("Base: R^2 = ", round((cor(base$sales,actual$sales))^2,digits = 4))
# R^2 for trends
rst <- paste("Trend: R^2 = ", round((cor(trends$sales,actual$sales))^2,digits = 4))
ggplotly(ggplot(plot_data, aes(x=Period, y = sales, color = label, linetype = label))+
geom_line()+
ggtitle(paste0(rsb,"\n",rst))+
scale_colour_manual(values=c("black", "red","grey"))+
scale_linetype_manual(values = c("solid", "dashed", "solid"))+
ylab('log(mvp)')+
xlab('Index'))
# Used data from 2011-01-01 through 2017-12-01 to train the model
training_data <- with_trends_full %>%
filter(Period >="2011-01-01"& Period <="2017-12-01")
model <- lm(data = training_data , sales~lag(sales, 12)+lag(sales, 48))
#+ lag(insurance,12) + lag(suvs,12))
test_data <- with_trends_full %>%
filter(Period >="2014-01-01" & Period < "2019-01-01")
predictions <- test_data %>%
add_predictions(model) %>%
filter(!(is.na(pred)) )
ggplotly(ggplot(predictions, aes(x=exp(predictions$sales), y = exp(predictions$pred)))+
geom_point() +
geom_abline()+
xlab("Sales")+
ylab("Prediction"))
(cor(predictions$sales, predictions$pred))^2
library(flexdashboard)
selectInput("Model", label = "Model",
choices = c(1, 2, 3, 4), selected = 1)
